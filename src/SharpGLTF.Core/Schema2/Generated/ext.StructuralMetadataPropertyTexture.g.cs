// <auto-generated/>

//------------------------------------------------------------------------------------------------
//      This file has been programatically generated; DONÂ´T EDIT!
//------------------------------------------------------------------------------------------------

#pragma warning disable SA1001
#pragma warning disable SA1027
#pragma warning disable SA1028
#pragma warning disable SA1121
#pragma warning disable SA1205
#pragma warning disable SA1309
#pragma warning disable SA1402
#pragma warning disable SA1505
#pragma warning disable SA1507
#pragma warning disable SA1508
#pragma warning disable SA1652

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Numerics;
using System.Text.Json;

namespace SharpGLTF.Schema2
{
	using Collections;

	/// <summary>
	/// A texture containing property values.
	/// </summary>
	partial class StructuralMetadataPropertyTextureProperty : TextureInfo
	{
	
		private const int _channelsMinItems = 1;
		private List<Int32> _channels;
		
		private Object _max;
		
		private Object _min;
		
		private Object _offset;
		
		private Object _scale;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "channels", _channels, _channelsMinItems);
			SerializeProperty(writer, "max", _max);
			SerializeProperty(writer, "min", _min);
			SerializeProperty(writer, "offset", _offset);
			SerializeProperty(writer, "scale", _scale);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "channels": DeserializePropertyList<Int32>(ref reader, _channels); break;
				case "max": _max = DeserializePropertyValue<Object>(ref reader); break;
				case "min": _min = DeserializePropertyValue<Object>(ref reader); break;
				case "offset": _offset = DeserializePropertyValue<Object>(ref reader); break;
				case "scale": _scale = DeserializePropertyValue<Object>(ref reader); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	/// <summary>
	/// Properties conforming to a class, organized as property values stored in textures.
	/// </summary>
	partial class StructuralMetadataPropertyTexture : ExtraProperties
	{
	
		private String _class;
		
		private String _name;
		
		private Dictionary<String,StructuralMetadataPropertyTextureProperty> _properties;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "class", _class);
			SerializeProperty(writer, "name", _name);
			SerializeProperty(writer, "properties", _properties);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "class": _class = DeserializePropertyValue<String>(ref reader); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "properties": DeserializePropertyDictionary<StructuralMetadataPropertyTextureProperty>(ref reader, _properties); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

}
