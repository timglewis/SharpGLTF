// <auto-generated/>

//------------------------------------------------------------------------------------------------
//      This file has been programatically generated; DONÂ´T EDIT!
//------------------------------------------------------------------------------------------------

#pragma warning disable SA1001
#pragma warning disable SA1027
#pragma warning disable SA1028
#pragma warning disable SA1121
#pragma warning disable SA1205
#pragma warning disable SA1309
#pragma warning disable SA1402
#pragma warning disable SA1505
#pragma warning disable SA1507
#pragma warning disable SA1508
#pragma warning disable SA1652

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Numerics;
using System.Text.Json;

namespace SharpGLTF.Schema2
{
	using Collections;

	/// <summary>
	/// The type of values in `stringOffsets`.
	/// </summary>
	public enum OffsetType
	{
		UINT8,
		UINT16,
		UINT32,
		UINT64,
	}


	/// <summary>
	/// An array of binary property values.
	/// </summary>
	partial class StructuralMetadataPropertyTableProperty : ExtraProperties
	{
	
		private const OffsetType _arrayOffsetTypeDefault = OffsetType.UINT32;
		private OffsetType? _arrayOffsetType = _arrayOffsetTypeDefault;
		
		private Int32? _arrayOffsets;
		
		private Object _max;
		
		private Object _min;
		
		private Object _offset;
		
		private Object _scale;
		
		private const OffsetType _stringOffsetTypeDefault = OffsetType.UINT32;
		private OffsetType? _stringOffsetType = _stringOffsetTypeDefault;
		
		private Int32? _stringOffsets;
		
		private Int32 _values;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializePropertyEnumSymbol<OffsetType>(writer, "arrayOffsetType", _arrayOffsetType, _arrayOffsetTypeDefault);
			SerializeProperty(writer, "arrayOffsets", _arrayOffsets);
			SerializeProperty(writer, "max", _max);
			SerializeProperty(writer, "min", _min);
			SerializeProperty(writer, "offset", _offset);
			SerializeProperty(writer, "scale", _scale);
			SerializePropertyEnumSymbol<OffsetType>(writer, "stringOffsetType", _stringOffsetType, _stringOffsetTypeDefault);
			SerializeProperty(writer, "stringOffsets", _stringOffsets);
			SerializeProperty(writer, "values", _values);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "arrayOffsetType": _arrayOffsetType = DeserializePropertyValue<OffsetType>(ref reader); break;
				case "arrayOffsets": _arrayOffsets = DeserializePropertyValue<Int32?>(ref reader); break;
				case "max": _max = DeserializePropertyValue<Object>(ref reader); break;
				case "min": _min = DeserializePropertyValue<Object>(ref reader); break;
				case "offset": _offset = DeserializePropertyValue<Object>(ref reader); break;
				case "scale": _scale = DeserializePropertyValue<Object>(ref reader); break;
				case "stringOffsetType": _stringOffsetType = DeserializePropertyValue<OffsetType>(ref reader); break;
				case "stringOffsets": _stringOffsets = DeserializePropertyValue<Int32?>(ref reader); break;
				case "values": _values = DeserializePropertyValue<Int32>(ref reader); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

	/// <summary>
	/// Properties conforming to a class, organized as property values stored in binary columnar arrays.
	/// </summary>
	partial class StructuralMetadataPropertyTable : ExtraProperties
	{
	
		private String _class;
		
		private const Int32 _countMinimum = 1;
		private Int32 _count;
		
		private String _name;
		
		private Dictionary<String,StructuralMetadataPropertyTableProperty> _properties;
		
	
		protected override void SerializeProperties(Utf8JsonWriter writer)
		{
			base.SerializeProperties(writer);
			SerializeProperty(writer, "class", _class);
			SerializeProperty(writer, "count", _count);
			SerializeProperty(writer, "name", _name);
			SerializeProperty(writer, "properties", _properties);
		}
	
		protected override void DeserializeProperty(string jsonPropertyName, ref Utf8JsonReader reader)
		{
			switch (jsonPropertyName)
			{
				case "class": _class = DeserializePropertyValue<String>(ref reader); break;
				case "count": _count = DeserializePropertyValue<Int32>(ref reader); break;
				case "name": _name = DeserializePropertyValue<String>(ref reader); break;
				case "properties": DeserializePropertyDictionary<StructuralMetadataPropertyTableProperty>(ref reader, _properties); break;
				default: base.DeserializeProperty(jsonPropertyName,ref reader); break;
			}
		}
	
	}

}
